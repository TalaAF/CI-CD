name: CI/CD Pipeline

# When should this pipeline run?
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      deploy_target:
        description: 'Deployment target environment'
        required: false
        default: 'staging'
        type: choice
        options:
        - 'staging'
        - 'production'
      skip_tests:
        description: 'Skip tests (for emergency deployments)'
        required: false
        default: 'false'
        type: boolean

# Environment variables
env:
  DOCKER_REGISTRY: "ghcr.io"
  IMAGE_NAME: "spring-boot-rest-service"
  ENVIRONMENT: ${{ github.event.inputs.deploy_target || 'staging' }}
  
jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.version.outputs.artifact-name }}
    
    steps:
    # Step 1: Get the source code
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Step 2: Set up Java environment
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    # Step 3: Cache Maven dependencies for faster builds
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
          
    # Step 4: Make Maven wrapper executable
    - name: Make mvnw executable
      run: chmod +x ./mvnw
      
    # Step 5: Run Checkstyle analysis
    - name: Run Checkstyle analysis
      run: ./mvnw checkstyle:check
      continue-on-error: true
      
    # Step 6: Run tests with coverage
    - name: Run tests
      run: ./mvnw clean test jacoco:report
      
    # Step 7: Generate version
    - name: Generate version
      id: version
      run: |
        VERSION="v1.0.${GITHUB_RUN_NUMBER}-${GITHUB_SHA:0:7}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "artifact-name=spring-boot-app-$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
      
    # Step 8: Build the application
    - name: Build application
      run: ./mvnw clean package -DskipTests
      
    # Step 9: Upload build artifacts
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.artifact-name }}
        path: target/*.jar
        retention-days: 30

  # Job 2: Security and Quality Analysis
  security-analysis:
    name: Security and Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
          
    - name: Make mvnw executable
      run: chmod +x ./mvnw
      
    - name: Run dependency check
      run: ./mvnw dependency-check:check
      continue-on-error: true
      
    - name: Run PMD analysis
      run: ./mvnw pmd:check
      continue-on-error: true

  # Job 3: Build Docker Image (without push)
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_target == 'production'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Download the JAR file built in previous job
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-and-test.outputs.artifact-name }}
        path: target/
        
    # Build Docker image (without push)
    - name: Build Docker image
      env:
        IMAGE_TAG: ${{ needs.build-and-test.outputs.version }}
      run: |
        echo "Building Docker image..."
        docker build -t $IMAGE_NAME:$IMAGE_TAG .
        docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
        
        echo "✅ Docker image built successfully!"
        echo "Image: $IMAGE_NAME:$IMAGE_TAG"
        echo "Size:"
        docker images $IMAGE_NAME:$IMAGE_TAG --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        
        echo "🔍 Image details:"
        docker inspect $IMAGE_NAME:$IMAGE_TAG --format='{{.Config.ExposedPorts}}'
        docker history $IMAGE_NAME:$IMAGE_TAG --no-trunc

  # Job 4: Deployment Simulation
  deploy-simulation:
    name: Deployment Simulation
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker]
    if: github.ref == 'refs/heads/main'
    
    environment: ${{ github.event.inputs.deploy_target || 'staging' }}
    
    steps:
    - name: Simulate deployment preparation
      run: |
        echo "🚀 Preparing deployment to $ENVIRONMENT environment..."
        echo "📦 Application version: ${{ needs.build-and-test.outputs.version }}"
        echo "🏷️ Artifact: ${{ needs.build-and-test.outputs.artifact-name }}"
        
    - name: Simulate pre-deployment checks
      run: |
        echo "🔍 Running pre-deployment checks..."
        echo "✅ Health check endpoint available"
        echo "✅ Database connectivity verified"
        echo "✅ Environment variables configured"
        echo "✅ Resource limits validated"
        
    - name: Simulate deployment
      run: |
        echo "📡 Deploying to $ENVIRONMENT..."
        echo "  🔄 Updating container image"
        echo "  ⏳ Waiting for deployment to stabilize (30s simulation)"
        sleep 10
        echo "  ✅ New tasks started successfully"
        echo "  ✅ Health checks passing"
        echo "  ✅ Old tasks drained"
        
    - name: Simulate post-deployment verification
      run: |
        echo "🧪 Running post-deployment tests..."
        echo "✅ Application is responding"
        echo "✅ Database queries successful"
        echo "✅ API endpoints functional"
        echo "🌐 Application URL: https://spring-boot-app-$ENVIRONMENT.example.com"

  # Job 5: Rollback Simulation
  rollback-simulation:
    name: Rollback Capability Demo
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_target == 'production' && failure()
    needs: [deploy-simulation]
    
    steps:
    - name: Simulate rollback procedure
      run: |
        echo "⚠️ ROLLBACK INITIATED"
        echo "🔙 Rolling back to previous stable version..."
        echo "  📋 Current version: ${{ needs.build-and-test.outputs.version }}"
        echo "  🎯 Target version: v1.0.$((GITHUB_RUN_NUMBER-1))-stable"
        echo "  ⏳ Reverting deployment..."
        sleep 5
        echo "  ✅ Rollback completed successfully"

  # Job 6: Enhanced notifications and reporting
  notify:
    name: Pipeline Results & Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, security-analysis, build-docker, deploy-simulation]
    if: always()
    
    steps:
    - name: Generate pipeline report
      run: |
        echo "# 📊 CI/CD Pipeline Report" > pipeline-report.md
        echo "" >> pipeline-report.md
        echo "## 🚀 Deployment Summary" >> pipeline-report.md
        echo "- **Branch:** ${{ github.ref_name }}" >> pipeline-report.md
        echo "- **Commit:** ${{ github.sha }}" >> pipeline-report.md
        echo "- **Author:** ${{ github.actor }}" >> pipeline-report.md
        echo "- **Environment:** $ENVIRONMENT" >> pipeline-report.md
        echo "- **Version:** ${{ needs.build-and-test.outputs.version || 'N/A' }}" >> pipeline-report.md
        echo "" >> pipeline-report.md
        
        echo "## ✅ Job Status" >> pipeline-report.md
        echo "- **Build & Test:** ${{ needs.build-and-test.result }}" >> pipeline-report.md
        echo "- **Security Analysis:** ${{ needs.security-analysis.result }}" >> pipeline-report.md
        echo "- **Docker Build:** ${{ needs.build-docker.result }}" >> pipeline-report.md
        echo "- **Deployment:** ${{ needs.deploy-simulation.result }}" >> pipeline-report.md
        
        cat pipeline-report.md
        
    - name: Notify success
      if: ${{ needs.build-and-test.result == 'success' && needs.build-docker.result == 'success' && needs.deploy-simulation.result == 'success' }}
      run: |
        echo "🎉 DEPLOYMENT SUCCESS!"
        echo "================================"
        echo "✅ All pipeline stages completed successfully"
        echo "📦 Version: ${{ needs.build-and-test.outputs.version }}"
        echo "🌍 Environment: $ENVIRONMENT"
        echo "🚀 Application is ready!"
        echo ""
        echo "📋 What was accomplished:"
        echo "  ✅ Code quality checks (Checkstyle, PMD)"
        echo "  ✅ Unit tests with coverage"
        echo "  ✅ Security vulnerability scanning"
        echo "  ✅ Docker image built and validated"
        echo "  ✅ Deployment simulation successful"
        echo ""
        echo "🔗 Next steps:"
        echo "  • Manual deployment to actual AWS ECS"
        echo "  • Update ECS service with new image"
        echo "  • Monitor application health"
        
    - name: Notify failure
      if: ${{ needs.build-and-test.result == 'failure' || needs.build-docker.result == 'failure' || needs.deploy-simulation.result == 'failure' }}
      run: |
        echo "❌ PIPELINE FAILURE"
        echo "==================="
        echo "One or more pipeline stages failed:"
        
        if [ "${{ needs.build-and-test.result }}" = "failure" ]; then
          echo "❌ Build & Test failed"
        fi
        if [ "${{ needs.security-analysis.result }}" = "failure" ]; then
          echo "⚠️ Security analysis issues detected"
        fi
        if [ "${{ needs.build-docker.result }}" = "failure" ]; then
          echo "❌ Docker build failed"
        fi
        if [ "${{ needs.deploy-simulation.result }}" = "failure" ]; then
          echo "❌ Deployment simulation failed"
        fi
        
        echo ""
        echo "🔍 Please review the logs and fix issues before retrying."