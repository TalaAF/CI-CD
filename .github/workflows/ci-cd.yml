name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test Application

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: target/*.jar

  build-and-push-docker:
    runs-on: ubuntu-latest
    name: Build Docker Image and Push to ECR
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: application-jar
        path: target/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  notify-results:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [build-and-test, build-and-push-docker]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.build-and-test.result == 'success' && (needs.build-and-push-docker.result == 'success' || needs.build-and-push-docker.result == 'skipped') }}
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "✅ Tests passed"
        if [ "${{ needs.build-and-push-docker.result }}" = "success" ]; then
          echo "✅ Docker image pushed to ECR"
        else
          echo "ℹ️ Docker push skipped (not main branch)"
        fi

    - name: Notify Failure
      if: ${{ needs.build-and-test.result == 'failure' || needs.build-and-push-docker.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed!"
        if [ "${{ needs.build-and-test.result }}" = "failure" ]; then
          echo "❌ Tests failed"
        fi
        if [ "${{ needs.build-and-push-docker.result }}" = "failure" ]; then
          echo "❌ Docker build/push failed"
        fi