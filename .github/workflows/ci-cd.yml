name: CI/CD Pipeline

# When should this pipeline run?
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

# Environment variables
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: spring-boot-payroll
  
jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get the source code
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Step 2: Set up Java environment
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    # Step 3: Cache Maven dependencies for faster builds
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
          
    # Step 4: Make Maven wrapper executable
    - name: Make mvnw executable
      run: chmod +x ./mvnw
      
    # Step 5: Run tests
    - name: Run tests
      run: ./mvnw clean test
      
    # Step 6: Build the application
    - name: Build application
      run: ./mvnw clean package -DskipTests
      
    # Step 7: Upload build artifacts
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: application-jar
        path: target/*.jar

  # Job 2: Build Docker Image (only for main branch)
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Download the JAR file built in previous job
    - name: Download JAR artifact
      uses: actions/download-artifact@v3
      with:
        name: application-jar
        path: target/
        
    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t payroll-app:${{ github.sha }} .
        docker build -t payroll-app:latest .
        echo "Docker image built successfully!"
        
    # List the image to verify
    - name: Verify Docker image
      run: docker images payroll-app

  # Job 3: Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-test.result == 'success'
      run: |
        echo "✅ Build and tests completed successfully!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        
    - name: Notify failure
      if: needs.build-and-test.result == 'failure'
      run: |
        echo "❌ Build or tests failed!"
        echo "Please check the logs above for details."