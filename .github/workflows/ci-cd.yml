name: CI/CD Pipeline

# When should this pipeline run?
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

# Environment variables
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: spring-boot-rest-service
  
jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get the source code
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Step 2: Set up Java environment
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    # Step 3: Cache Maven dependencies for faster builds
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
          
    # Step 4: Make Maven wrapper executable
    - name: Make mvnw executable
      run: chmod +x ./mvnw
      
    - name: Run Checkstyle analysis
      run: ./mvnw checkstyle:check
      
    # Step 5: Run tests
    - name: Run tests
      run: ./mvnw clean test
      
    # Step 6: Build the application
    - name: Build application
      run: ./mvnw clean package -DskipTests
      
    # Step 7: Upload build artifacts
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: target/*.jar

  # Job 2: Build Docker Image and Push to ECR (only for main branch)
  build-and-push-docker:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Download the JAR file built in previous job
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: application-jar
        path: target/
        
    # Configure AWS credentials with session token support
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Build, tag, and push image to Amazon ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "✅ Image pushed successfully!"
        echo "Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "Latest URI: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

  # Job 3: Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-test, build-and-push-docker]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.build-and-test.result == 'success' && (needs.build-and-push-docker.result == 'success' || needs.build-and-push-docker.result == 'skipped') }}
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "✅ Build and tests passed"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        if [ "${{ needs.build-and-push-docker.result }}" = "success" ]; then
          echo "✅ Docker image pushed to ECR successfully"
        else
          echo "ℹ️ Docker push skipped (not main branch)"
        fi
        
    - name: Notify failure
      if: ${{ needs.build-and-test.result == 'failure' || needs.build-and-push-docker.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        if [ "${{ needs.build-and-test.result }}" = "failure" ]; then
          echo "❌ Build or tests failed"
        fi
        if [ "${{ needs.build-and-push-docker.result }}" = "failure" ]; then
          echo "❌ Docker build/push failed"
        fi
        echo "Please check the logs above for details."